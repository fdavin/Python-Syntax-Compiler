Terminals:
+ - * / % and or variable number is ! not = > < ( ) # True False string ' " if elif else : print input str float int double while for in range def class import as from return raise range , break pass continue with open .read .write
Variables:
S MULTIVAR VAR VAL BOOLEAN OPS STRING IF ELIF ELSE PRINT CONDITIONAL RELATION INPUT BRACKET TYPE WHILE FOR RANGE DEF CLASS IMPORT FROM RETURN RAISE WITH RANGE BREAK PASS CONTINUE COMMENT CONTENT WITHVAR
Productions:
S -> S S | VAR = MULTIVAR | VAR + = MULTIVAR | VAR - = MULTIVAR | VAR * = MULTIVAR | VAR / = MULTIVAR | IF | PRINT | WHILE | FOR | DEF | CLASS | IMPORT | FROM | COMMENT | WITH; 
MULTIVAR ->  VAR | VAL | MULTIVAR OPS MULTIVAR | INPUT | MULTIVAR , MULTIVAR;
VAR -> variable;
VAL -> number | MULTIVAR OPS MULTIVAR | MULTIVAR * * MULTIVAR | MULTIVAR / / MULTIVAR | ( MULTIVAR ) | BOOLEAN | STRING;
RELATION -> > | < | = = | ! = | < = | > =;
BOOLEAN -> True | False | BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | MULTIVAR is MULTIVAR | MULTIVAR RELATION MULTIVAR;
OPS -> + | - | * | / | %;
DEF -> def VAR BRACKET : S | DEF RETURN;
RETURN -> return BOOLEAN | return VAL;
CLASS -> class VAR : S;
IMPORT -> import VAR as VAR | import VAR;
FROM -> from VAR IMPORT;
STRING -> " string " | ' string ' | STRING + STRING;
CONTENT -> VAR | CONTENT CONTENT;
COMMENT -> " " " CONTENT " " " | ' ' ' CONTENT ' ' ' | # CONTENT;
BRACKET -> ( MULTIVAR ) | ( );
PRINT -> print BRACKET;
IF -> if CONDITIONAL | IF ELIF | IF ELSE | IF RAISE | IF BREAK | IF PASS | IF CONTINUE;
CONDITIONAL -> ( BOOLEAN ) : S | BOOLEAN : S;
RAISE -> raise BRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
ELIF -> elif CONDITIONAL | ELIF ELIF | ELIF ELSE | ELIF RAISE | ELIF BREAK | ELIF PASS | ELIF CONTINUE;
ELSE -> else : S | ELSE RAISE | ELSE BREAK | ELSE PASS | ELSE CONTINUE;
RANGE -> range BRACKET;
FOR -> for VAR in STRING : S | for VAR in RANGE : S;
WITH -> with open ( STRING , STRING ) as VAR : VAR = WITHVAR | with open ( STRING , STRING ) as VAR : VAR = WITHVAR;
WITHVAR -> VAR .read BRACKET | VAR .write BRACKET;
WHILE -> while CONDITIONAL